[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "sources.html",
    "href": "sources.html",
    "title": "sources",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "sources.html#quarto",
    "href": "sources.html#quarto",
    "title": "sources",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "sources.html#running-code",
    "href": "sources.html#running-code",
    "title": "sources",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "source1.html",
    "href": "source1.html",
    "title": "Source 1",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "source1.html#quarto",
    "href": "source1.html#quarto",
    "title": "Source 1",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "source1.html#running-code",
    "href": "source1.html#running-code",
    "title": "Source 1",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My First Website",
    "section": "",
    "text": "#| echo: false\n\n#| label: setup\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(ggplot2)\n\n\ndata &lt;- read_csv(\"vazgen.csv\")\n\nNew names:\nRows: 15285 Columns: 15\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(2): direction, device dbl (12): ...1, entry_id, uv, lux, temperature,\npressure, humidity, pm1, pm... dttm (1): time\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...1`\n\ndata2 &lt;- read_csv(\"sevan.csv\")\n\nNew names:\nRows: 2290 Columns: 15\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(2): direction, device dbl (12): ...1, entry_id, uv, lux, temperature,\npressure, humidity, pm1, pm... dttm (1): time\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...1`\n\ndata3 &lt;- read_csv(\"maralik.csv\")\n\nNew names:\nRows: 11157 Columns: 15\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(2): direction, device dbl (12): ...1, entry_id, uv, lux, temperature,\npressure, humidity, pm1, pm... dttm (1): time\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...1`\n\ndata4 &lt;- read_csv(\"gavar.csv\")\n\nNew names:\nRows: 2196 Columns: 15\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(2): direction, device dbl (12): ...1, entry_id, uv, lux, temperature,\npressure, humidity, pm1, pm... dttm (1): time\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...1`\n\ndata5 &lt;- read_csv(\"ashotsk.csv\")\n\nNew names:\nRows: 2047 Columns: 15\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(2): direction, device dbl (12): ...1, entry_id, uv, lux, temperature,\npressure, humidity, pm1, pm... dttm (1): time\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...1`\n\ndata6 &lt;- read.csv(\"artik.csv\")\n\n\nlibrary(tidyverse)\nlibrary(lubridate)  \n\ndata &lt;- read.csv(\"vazgen.csv\")\n\ndata$time &lt;- as.Date(data$time)\n\ndata &lt;- data %&gt;%\n  mutate(season = case_when(\n    month(time) %in% 3:5 ~ \"Spring\",\n    month(time) %in% 6:8 ~ \"Summer\",\n    month(time) %in% 9:11 ~ \"Autumn\",\n    month(time) %in% c(12, 1, 2) ~ \"Winter\"\n  ))\n\ndata &lt;- data %&gt;%\n  mutate(day_of_year = yday(time))\n\np &lt;- ggplot(data, aes(x=time, y=temperature, color=season)) +\n  geom_line() +\n  scale_x_continuous(breaks = c(1, 91, 182, 274), labels = c(\"Winter\", \"Spring\", \"Summer\", \"Autumn\")) +\n  labs(title = \"Temperature Over Time by Season\",\n       x = \"Day of Year\",\n       y = \"Temperature\",\n       color = \"Season\") +\n  theme_minimal() +\n  coord_polar(theta = \"x\")\n\nprint(p)\n\n\n\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(lubridate)  \n\ndata &lt;- read.csv(\"sevan.csv\")  \n\n\ndata$time &lt;- as.Date(data$time)\n\ndata &lt;- data %&gt;%\n  mutate(season = case_when(\n    month(time) %in% 3:5 ~ \"Spring\",\n    month(time) %in% 6:8 ~ \"Summer\",\n    month(time) %in% 9:11 ~ \"Autumn\",\n    month(time) %in% c(12, 1, 2) ~ \"Winter\"\n  ))\n\ndata &lt;- data %&gt;%\n  mutate(day_of_year = yday(time))\n\np &lt;- ggplot(data, aes(x = time, y = temperature, color = season)) +\n  geom_line() +\n  scale_x_continuous() +\n  labs(title = \"Temperature Over Time by Season In Sevan\",\n       x = \"Day of Year\",\n       y = \"Temperature\",\n       color = \"Season\") +\n  theme_minimal() +\n  coord_polar(theta = \"x\")\n\nprint(p)\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\nlibrary(gapminder)\n\ndata4 &lt;-  read_csv(\"gavar.csv\")\n\nNew names:\n• `` -&gt; `...1`\n\n\nRows: 2196 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (2): direction, device\ndbl  (12): ...1, entry_id, uv, lux, temperature, pressure, humidity, pm1, pm...\ndttm  (1): time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndata3 &lt;- read_csv(\"maralik.csv\")\n\nNew names:\nRows: 11157 Columns: 15\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(2): direction, device dbl (12): ...1, entry_id, uv, lux, temperature,\npressure, humidity, pm1, pm... dttm (1): time\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...1`\n\ncombined &lt;- rbind(data4,data3)\n\np &lt;- combined%&gt;%\n  ggplot( aes(time, pressure , size = temperature, color=device)) +\n  geom_point(aes(color = device)) +\n  theme_bw() +\n  ggtitle(\"Temperature, Pressure Over Time In Gavar & Maralik\")\n\nggplotly(p)\n\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(babynames)\nlibrary(viridis)\n\nLoading required package: viridisLite\n\nlibrary(hrbrthemes)\nlibrary(plotly)\n\ndata5 &lt;- read_csv(\"ashotsk.csv\") \n\nNew names:\n• `` -&gt; `...1`\n\n\nRows: 2047 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (2): direction, device\ndbl  (12): ...1, entry_id, uv, lux, temperature, pressure, humidity, pm1, pm...\ndttm  (1): time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndata5 &lt;- data5 %&gt;% \n  select(\"pressure\", \"humidity\", \"pm2_5\", \"temperature\", \"time\")\n\np &lt;- data5 %&gt;% \n  ggplot(aes(x = time, y = temperature, fill = temperature)) +\n  geom_area() +\n  theme(legend.position = \"none\") +\n  ggtitle(\"Temperature Over Time In Ashotsk\") +\n  scale_fill_gradient(low = \"yellow\")\n\np &lt;- ggplotly(p, tooltip = c(\"x\", \"y\", \"fill\"))\n\np\n\n\n\n\n\n\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(reshape2)\n\n\nAttaching package: 'reshape2'\n\n\nThe following object is masked from 'package:tidyr':\n\n    smiths\n\nlibrary(plotly)\n\n\ndata &lt;- read.csv(\"artik.csv\")\n\ndata$time &lt;- as.POSIXct(data$time, format=\"%Y-%m-%d %H:%M:%S\")\n\ndata_long &lt;- melt(data, id.vars = \"time\", measure.vars = c(\"pm1\", \"pm2_5\", \"pm10\"))\n\nplot_pm1 &lt;- ggplot(subset(data_long, variable == \"pm1\"), aes(x = time, y = value)) +\n  geom_hex(bins = 70) +\n  scale_fill_viridis_c() +\n  labs(title = \"Hexbin Plot for PM1\", x = \"Time\", y = \"PM1\") +\n  theme_bw()\n\ninteractive_pm1 &lt;- ggplotly(plot_pm1)\n\nWarning: Removed 353 rows containing non-finite outside the scale range\n(`stat_binhex()`).\n\nplot_pm2_5 &lt;- ggplot(subset(data_long, variable == \"pm2_5\"), aes(x = time, y = value)) +\n  geom_hex(bins = 70) +\n  scale_fill_viridis_c() +\n  labs(title = \"Hexbin Plot for PM2.5\", x = \"Time\", y = \"PM2.5\") +\n  theme_bw()\n\ninteractive_pm2_5 &lt;- ggplotly(plot_pm2_5)\n\nWarning: Removed 353 rows containing non-finite outside the scale range\n(`stat_binhex()`).\n\nplot_pm10 &lt;- ggplot(subset(data_long, variable == \"pm10\"), aes(x = time, y = value)) +\n  geom_hex(bins = 70) +\n  scale_fill_viridis_c() +\n  labs(title = \"Hexbin Plot for PM10\", x = \"Time\", y = \"PM10\") +\n  theme_bw()\n\ninteractive_pm10 &lt;- ggplotly(plot_pm10)\n\nWarning: Removed 353 rows containing non-finite outside the scale range\n(`stat_binhex()`).\n\ninteractive_pm1\n\n\n\n\ninteractive_pm2_5\n\n\n\n\ninteractive_pm10\n\n\n\n\n\n\n\n'data.frame':   12089 obs. of  15 variables:\n $ X          : int  1 2 3 4 5 6 7 8 9 10 ...\n $ entry_id   : int  1 2 3 4 5 6 7 8 9 10 ...\n $ time       : POSIXct, format: \"2024-03-06 13:57:31\" \"2024-03-06 14:12:36\" ...\n $ uv         : num  NA NA NA NA NA NA NA NA NA NA ...\n $ lux        : num  NA NA NA NA NA NA NA NA NA NA ...\n $ temperature: num  8 9 9 9 9 9 8 8 7 6 ...\n $ pressure   : int  618 618 618 617 617 617 617 617 617 617 ...\n $ humidity   : int  42 39 40 40 40 40 41 43 44 47 ...\n $ pm1        : int  16 14 14 16 15 16 16 16 16 18 ...\n $ pm2_5      : int  28 25 24 29 26 29 29 27 26 35 ...\n $ pm10       : int  28 26 25 29 26 31 29 27 27 35 ...\n $ speed      : num  10.21 7.04 6.72 7.24 7.42 ...\n $ rain       : num  0 0 0 0 0 0 0 0 0 0 ...\n $ direction  : chr  \"SW\" \"W\" \"SW\" \"SW\" ...\n $ device     : chr  \"Artik\" \"Artik\" \"Artik\" \"Artik\" ...\n\n\n       X            entry_id          time                      \n Min.   :    1   Min.   :    1   Min.   :2024-03-06 13:57:31.0  \n 1st Qu.: 3023   1st Qu.: 3023   1st Qu.:2024-04-07 05:41:22.0  \n Median : 6045   Median : 6045   Median :2024-05-08 23:17:41.0  \n Mean   : 6045   Mean   : 6045   Mean   :2024-05-09 04:27:00.5  \n 3rd Qu.: 9067   3rd Qu.: 9067   3rd Qu.:2024-06-10 04:40:40.0  \n Max.   :12089   Max.   :12089   Max.   :2024-07-12 10:00:00.0  \n                                                                \n       uv             lux            temperature       pressure    \n Min.   :0.000   Min.   :    7.93   Min.   :-9.00   Min.   :610.0  \n 1st Qu.:0.000   1st Qu.:   11.10   1st Qu.: 6.26   1st Qu.:616.0  \n Median :0.610   Median :10662.46   Median :12.81   Median :619.0  \n Mean   :1.028   Mean   :21915.66   Mean   :13.22   Mean   :618.7  \n 3rd Qu.:1.940   3rd Qu.:51974.31   3rd Qu.:19.53   3rd Qu.:622.0  \n Max.   :4.840   Max.   :52428.00   Max.   :36.72   Max.   :627.0  \n NA's   :6204    NA's   :6204                                      \n    humidity           pm1             pm2_5             pm10       \n Min.   :  6.00   Min.   :  0.00   Min.   :  0.00   Min.   :  0.00  \n 1st Qu.: 37.00   1st Qu.:  3.00   1st Qu.:  5.00   1st Qu.:  5.00  \n Median : 56.00   Median :  5.00   Median :  8.00   Median :  8.00  \n Mean   : 57.97   Mean   :  6.47   Mean   : 11.92   Mean   : 12.62  \n 3rd Qu.: 77.00   3rd Qu.:  8.00   3rd Qu.: 13.00   3rd Qu.: 14.00  \n Max.   :100.00   Max.   :239.00   Max.   :488.00   Max.   :572.00  \n                  NA's   :353      NA's   :353      NA's   :353     \n     speed             rain          direction            device         \n Min.   : 0.000   Min.   :0.00000   Length:12089       Length:12089      \n 1st Qu.: 1.980   1st Qu.:0.00000   Class :character   Class :character  \n Median : 3.620   Median :0.00000   Mode  :character   Mode  :character  \n Mean   : 4.689   Mean   :0.02579                                        \n 3rd Qu.: 6.110   3rd Qu.:0.00000                                        \n Max.   :24.520   Max.   :7.82320                                        \n                                                                         \n\n\n\nprint(plot2)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "source2.html",
    "href": "source2.html",
    "title": "source2",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "source2.html#quarto",
    "href": "source2.html#quarto",
    "title": "source2",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "source2.html#running-code",
    "href": "source2.html#running-code",
    "title": "source2",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  }
]