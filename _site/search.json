[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My First Website",
    "section": "",
    "text": "#| echo: false\n\n#| label: setup\n\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(ggplot2)\n\n\ndata &lt;- read_csv(\"vazgen.csv\")\n\nNew names:\nRows: 15285 Columns: 15\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(2): direction, device dbl (12): ...1, entry_id, uv, lux, temperature,\npressure, humidity, pm1, pm... dttm (1): time\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...1`\n\ndata2 &lt;- read_csv(\"sevan.csv\")\n\nNew names:\nRows: 2290 Columns: 15\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(2): direction, device dbl (12): ...1, entry_id, uv, lux, temperature,\npressure, humidity, pm1, pm... dttm (1): time\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...1`\n\ndata3 &lt;- read_csv(\"maralik.csv\")\n\nNew names:\nRows: 11157 Columns: 15\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(2): direction, device dbl (12): ...1, entry_id, uv, lux, temperature,\npressure, humidity, pm1, pm... dttm (1): time\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...1`\n\ndata4 &lt;- read_csv(\"gavar.csv\")\n\nNew names:\nRows: 2196 Columns: 15\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(2): direction, device dbl (12): ...1, entry_id, uv, lux, temperature,\npressure, humidity, pm1, pm... dttm (1): time\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...1`\n\ndata5 &lt;- read_csv(\"ashotsk.csv\")\n\nNew names:\nRows: 2047 Columns: 15\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(2): direction, device dbl (12): ...1, entry_id, uv, lux, temperature,\npressure, humidity, pm1, pm... dttm (1): time\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...1`\n\ndata6 &lt;- read.csv(\"artik.csv\")\n\n\nlibrary(tidyverse)\nlibrary(lubridate)  \n\ndata &lt;- read.csv(\"vazgen.csv\")\n\ndata$time &lt;- as.Date(data$time)\n\ndata &lt;- data %&gt;%\n  mutate(season = case_when(\n    month(time) %in% 3:5 ~ \"Spring\",\n    month(time) %in% 6:8 ~ \"Summer\",\n    month(time) %in% 9:11 ~ \"Autumn\",\n    month(time) %in% c(12, 1, 2) ~ \"Winter\"\n  ))\n\ndata &lt;- data %&gt;%\n  mutate(day_of_year = yday(time))\n\np &lt;- ggplot(data, aes(x=time, y=temperature, color=season)) +\n  geom_line() +\n  scale_x_continuous(breaks = c(1, 91, 182, 274), labels = c(\"Winter\", \"Spring\", \"Summer\", \"Autumn\")) +\n  labs(title = \"Temperature Over Time by Season\",\n       x = \"Day of Year\",\n       y = \"Temperature\",\n       color = \"Season\") +\n  theme_minimal() +\n  coord_polar(theta = \"x\")\n\nprint(p)\n\n\n\n\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(lubridate)  \n\ndata &lt;- read.csv(\"sevan.csv\")  \n\n\ndata$time &lt;- as.Date(data$time)\n\ndata &lt;- data %&gt;%\n  mutate(season = case_when(\n    month(time) %in% 3:5 ~ \"Spring\",\n    month(time) %in% 6:8 ~ \"Summer\",\n    month(time) %in% 9:11 ~ \"Autumn\",\n    month(time) %in% c(12, 1, 2) ~ \"Winter\"\n  ))\n\ndata &lt;- data %&gt;%\n  mutate(day_of_year = yday(time))\n\np &lt;- ggplot(data, aes(x = time, y = temperature, color = season)) +\n  geom_line() +\n  scale_x_continuous() +\n  labs(title = \"Temperature Over Time by Season In Sevan\",\n       x = \"Day of Year\",\n       y = \"Temperature\",\n       color = \"Season\") +\n  theme_minimal() +\n  coord_polar(theta = \"x\")\n\nprint(p)\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\n\nThe following object is masked from 'package:stats':\n\n    filter\n\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\nlibrary(gapminder)\n\ndata4 &lt;-  read_csv(\"gavar.csv\")\n\nNew names:\n• `` -&gt; `...1`\n\n\nRows: 2196 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (2): direction, device\ndbl  (12): ...1, entry_id, uv, lux, temperature, pressure, humidity, pm1, pm...\ndttm  (1): time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndata3 &lt;- read_csv(\"maralik.csv\")\n\nNew names:\nRows: 11157 Columns: 15\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(2): direction, device dbl (12): ...1, entry_id, uv, lux, temperature,\npressure, humidity, pm1, pm... dttm (1): time\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...1`\n\ncombined &lt;- rbind(data4,data3)\n\np &lt;- combined%&gt;%\n  ggplot( aes(time, pressure , size = temperature, color=device)) +\n  geom_point(aes(color = device)) +\n  theme_bw() +\n  ggtitle(\"Temperature, Pressure Over Time In Gavar & Maralik\")\n\nggplotly(p)\n\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(babynames)\nlibrary(viridis)\n\nLoading required package: viridisLite\n\nlibrary(hrbrthemes)\nlibrary(plotly)\n\ndata5 &lt;- read_csv(\"ashotsk.csv\") \n\nNew names:\n• `` -&gt; `...1`\n\n\nRows: 2047 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (2): direction, device\ndbl  (12): ...1, entry_id, uv, lux, temperature, pressure, humidity, pm1, pm...\ndttm  (1): time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndata5 &lt;- data5 %&gt;% \n  select(\"pressure\", \"humidity\", \"pm2_5\", \"temperature\", \"time\")\n\np &lt;- data5 %&gt;% \n  ggplot(aes(x = time, y = temperature, fill = temperature)) +\n  geom_area() +\n  theme(legend.position = \"none\") +\n  ggtitle(\"Temperature Over Time In Ashotsk\") +\n  scale_fill_gradient(low = \"yellow\")\n\np &lt;- ggplotly(p, tooltip = c(\"x\", \"y\", \"fill\"))\n\np\n\n\n\n\n\n\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(reshape2)\n\n\nAttaching package: 'reshape2'\n\n\nThe following object is masked from 'package:tidyr':\n\n    smiths\n\nlibrary(plotly)\n\n# Read the data from the CSV file\ndata &lt;- read.csv(\"artik.csv\")\n\n# Ensure the 'time' column is properly formatted\ndata$time &lt;- as.POSIXct(data$time, format=\"%Y-%m-%d %H:%M:%S\")\n\n# Melt the data to long format for easier plotting\ndata_long &lt;- melt(data, id.vars = \"time\", measure.vars = c(\"pm1\", \"pm2_5\", \"pm10\"))\n\n# Plot for PM1\nplot_pm1 &lt;- ggplot(subset(data_long, variable == \"pm1\"), aes(x = time, y = value)) +\n  geom_hex(bins = 70) +\n  scale_fill_viridis_c() +\n  labs(title = \"Hexbin Plot for PM1\", x = \"Time\", y = \"PM1\") +\n  theme_bw()\n\n# Convert to interactive plot\ninteractive_pm1 &lt;- ggplotly(plot_pm1)\n\nWarning: Removed 353 rows containing non-finite outside the scale range\n(`stat_binhex()`).\n\n# Plot for PM2.5\nplot_pm2_5 &lt;- ggplot(subset(data_long, variable == \"pm2_5\"), aes(x = time, y = value)) +\n  geom_hex(bins = 70) +\n  scale_fill_viridis_c() +\n  labs(title = \"Hexbin Plot for PM2.5\", x = \"Time\", y = \"PM2.5\") +\n  theme_bw()\n\n# Convert to interactive plot\ninteractive_pm2_5 &lt;- ggplotly(plot_pm2_5)\n\nWarning: Removed 353 rows containing non-finite outside the scale range\n(`stat_binhex()`).\n\n# Plot for PM10\nplot_pm10 &lt;- ggplot(subset(data_long, variable == \"pm10\"), aes(x = time, y = value)) +\n  geom_hex(bins = 70) +\n  scale_fill_viridis_c() +\n  labs(title = \"Hexbin Plot for PM10\", x = \"Time\", y = \"PM10\") +\n  theme_bw()\n\n# Convert to interactive plot\ninteractive_pm10 &lt;- ggplotly(plot_pm10)\n\nWarning: Removed 353 rows containing non-finite outside the scale range\n(`stat_binhex()`).\n\n# Display interactive plots\ninteractive_pm1\n\n\n\n\ninteractive_pm2_5\n\n\n\n\ninteractive_pm10"
  },
  {
    "objectID": "sources.html",
    "href": "sources.html",
    "title": "sources",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "sources.html#quarto",
    "href": "sources.html#quarto",
    "title": "sources",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "sources.html#running-code",
    "href": "sources.html#running-code",
    "title": "sources",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "source1.html",
    "href": "source1.html",
    "title": "Source 1",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "source1.html#quarto",
    "href": "source1.html#quarto",
    "title": "Source 1",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "source1.html#running-code",
    "href": "source1.html#running-code",
    "title": "Source 1",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  },
  {
    "objectID": "source2.html",
    "href": "source2.html",
    "title": "source2",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "source2.html#quarto",
    "href": "source2.html#quarto",
    "title": "source2",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "source2.html#running-code",
    "href": "source2.html#running-code",
    "title": "source2",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n1 + 1\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed)."
  }
]